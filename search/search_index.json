{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Greetings! I'm Matthew Yeager , a Googler in London, and I've created this site as my working development site generally and, more specifically in the immediate, as my personal companion guide for the Todd McLeod Go training course on Udemy . I've also created this site to catalogue things I've learnt so that I can make new mistakes but, hopefully, not the same ones twice. :-) If any of this material is of benefit to you as well, so much the better, however please note that any and all Golang training materials herein remain the property of Todd McLeod TODO [:] General : Explain why Todd McLeod 's Udemy course is one of the best I've taken. Ever. For any language. TODO [:] Updates & Releases : Create bulk file renaming. Just take me to the GitHub repo! [:]The socials Twitter LinkedIn GitHub Facebook [:] Hands On Exercises Level 01.00 Level 02.00 Level 03.00 Level 04.00 Level 05.00 Level 06.00 Level 07.00 Level 08.00 Level 09.00 Level 10.00 Level 11.00 Level 12.00 Level 13.00 [:]Useful Documentation GoDoc Go By Example [:]Things I've learnt When setting up Github, ensure that you've generated a new SSH key and added it to your SSH agent, keychain, and Github user account. Check your remote repository URLs and change from HTTPS to SSH if necessary ... if you don't, you'll likely get errors when you try to push. There are many reasons to love OhMyZsh! which offers plugins galore, including the hugely useful Github short commands . If you're not using Homebrew , well ... you really should be. Spelling mistakes have been the cause of almost all of the mistakes I've made ... and, through these mistakes, much of the learning and progress I've made. [:]Golang Language Tips init , condition , post keyword , identifier , type [:]Todd McLeod Life Tips TODO [:] Make these into a t-shirt :-) Drop by drop, the bucket gets filled. Persistently, patiently, you are bound to succeed. If you want to see the future, look at the seeds you are planting today. Plant the right seeds today, you'll harvest a great crop tomorrow. You are cultivating the garden which is your life. You need to go out and work the garden every day , planting seeds, tending the plants, watering the garden, and removing the weeds ... that which we can refer to as not beneficial to your garden or unskillful ... you are going to have a good garden and realise a good crop. It's not your intelligence. It's not who you're parents are / were. It's not what culture you come from. The number factor for student success is grit . Angela Duckworth Grit: The Power of Passion and Perseverance Time on task. If you want to be good at anything, you need to get out there and do it every day . Set aside some time every day and commit . If you want to be successful, get in front of what's coming and let it hit you. Focus on what is important, not on what is urgent. Stress is the difference between what is and what you wish things were. If you no longer want it, you can have it. Try to be 100% focussed ... and 100% relaxed. [:]Unfiled Wesbos Command Line Power User course Markdown cheat sheet Github does dotfiles organisation and Michael Smalley excellent blog post . Bazel and using Golang with Bazel I try not to be a fanboy, but VScode is some next level 'holy shit' IDE stuff. dotfiles to help maximise efficiencies with command line and developer workflow. Speaking of dotfiles, you can launch programs directly from terminal using [program name] + . or filename . For example ... code . /or/ code [filename] will launch VScode open . /or/ open [filename] will launch Finder diff-so-fancy : Usage diff -u file1 file 2 | diff-so-fancy","title":"Home"},{"location":"#greetings","text":"I'm Matthew Yeager , a Googler in London, and I've created this site as my working development site generally and, more specifically in the immediate, as my personal companion guide for the Todd McLeod Go training course on Udemy . I've also created this site to catalogue things I've learnt so that I can make new mistakes but, hopefully, not the same ones twice. :-) If any of this material is of benefit to you as well, so much the better, however please note that any and all Golang training materials herein remain the property of Todd McLeod TODO [:] General : Explain why Todd McLeod 's Udemy course is one of the best I've taken. Ever. For any language. TODO [:] Updates & Releases : Create bulk file renaming. Just take me to the GitHub repo!","title":"Greetings!"},{"location":"#the-socials","text":"Twitter LinkedIn GitHub Facebook","title":"[:]The socials"},{"location":"#hands-on-exercises","text":"Level 01.00 Level 02.00 Level 03.00 Level 04.00 Level 05.00 Level 06.00 Level 07.00 Level 08.00 Level 09.00 Level 10.00 Level 11.00 Level 12.00 Level 13.00","title":"[:]Hands On Exercises"},{"location":"#useful-documentation","text":"GoDoc Go By Example","title":"[:]Useful Documentation"},{"location":"#things-ive-learnt","text":"When setting up Github, ensure that you've generated a new SSH key and added it to your SSH agent, keychain, and Github user account. Check your remote repository URLs and change from HTTPS to SSH if necessary ... if you don't, you'll likely get errors when you try to push. There are many reasons to love OhMyZsh! which offers plugins galore, including the hugely useful Github short commands . If you're not using Homebrew , well ... you really should be. Spelling mistakes have been the cause of almost all of the mistakes I've made ... and, through these mistakes, much of the learning and progress I've made.","title":"[:]Things I've learnt"},{"location":"#golang-language-tips","text":"init , condition , post keyword , identifier , type","title":"[:]Golang Language Tips"},{"location":"#todd-mcleod-life-tips","text":"TODO [:] Make these into a t-shirt :-) Drop by drop, the bucket gets filled. Persistently, patiently, you are bound to succeed. If you want to see the future, look at the seeds you are planting today. Plant the right seeds today, you'll harvest a great crop tomorrow. You are cultivating the garden which is your life. You need to go out and work the garden every day , planting seeds, tending the plants, watering the garden, and removing the weeds ... that which we can refer to as not beneficial to your garden or unskillful ... you are going to have a good garden and realise a good crop. It's not your intelligence. It's not who you're parents are / were. It's not what culture you come from. The number factor for student success is grit . Angela Duckworth Grit: The Power of Passion and Perseverance Time on task. If you want to be good at anything, you need to get out there and do it every day . Set aside some time every day and commit . If you want to be successful, get in front of what's coming and let it hit you. Focus on what is important, not on what is urgent. Stress is the difference between what is and what you wish things were. If you no longer want it, you can have it. Try to be 100% focussed ... and 100% relaxed.","title":"[:]Todd McLeod Life Tips"},{"location":"#unfiled","text":"Wesbos Command Line Power User course Markdown cheat sheet Github does dotfiles organisation and Michael Smalley excellent blog post . Bazel and using Golang with Bazel I try not to be a fanboy, but VScode is some next level 'holy shit' IDE stuff. dotfiles to help maximise efficiencies with command line and developer workflow. Speaking of dotfiles, you can launch programs directly from terminal using [program name] + . or filename . For example ... code . /or/ code [filename] will launch VScode open . /or/ open [filename] will launch Finder diff-so-fancy : Usage diff -u file1 file 2 | diff-so-fancy","title":"[:]Unfiled"},{"location":"level010/","text":"Level 1 Exercises in this level ex01 Using the short declaration operator, assign values to variable s with the identifiers x``, y , and `z . Now print the values stored in those variables using a single statement and multiple print statements. ex02 Using the code from the previous exercise; at the package level scope, assign the values to three variable s. In func main use fmt.Sprintf to print all of the values to a single string . Assign the returned value of type string using the short declaration operator to a variable with the identifier s . ex03 Using the code from the previous exercise, at the package level scope, assign the values to three variables ... ex04 Create your own type``. Have the underlying type be an int . Create a variable of your new type with the identifier x using the var` keyword. ex05 Building on the code from the previous exercise; at the package level scope, using the var keyword create a variable with the identifier y . The variable should be of the underlying type of your custom type x . Now use conversion to convert the type of the value stored in x to the underlying type .","title":"L010"},{"location":"level010/#level-1","text":"","title":"Level 1"},{"location":"level010/#exercises-in-this-level","text":"ex01 Using the short declaration operator, assign values to variable s with the identifiers x``, y , and `z . Now print the values stored in those variables using a single statement and multiple print statements. ex02 Using the code from the previous exercise; at the package level scope, assign the values to three variable s. In func main use fmt.Sprintf to print all of the values to a single string . Assign the returned value of type string using the short declaration operator to a variable with the identifier s . ex03 Using the code from the previous exercise, at the package level scope, assign the values to three variables ... ex04 Create your own type``. Have the underlying type be an int . Create a variable of your new type with the identifier x using the var` keyword. ex05 Building on the code from the previous exercise; at the package level scope, using the var keyword create a variable with the identifier y . The variable should be of the underlying type of your custom type x . Now use conversion to convert the type of the value stored in x to the underlying type .","title":"Exercises in this level"},{"location":"level020/","text":"Level 2 Exercises in this level ex01 Write a program that prints a number in decimal , binary , and hex . ex02 Using the following operators, write expressions and assign their values to variables; == , <= , >= , != , < , > ex03 Create typed and untyped constant s. Print the values of the constant s. ex04 \"Exercise 4\") Write a program that; assigns an int to a variable, prints that int in decimal , binary , and hex , shifts the bits of that int over 1 position to the left and assigns that to a variable, prints that variable in decimal , binary , and hex . ex05 Create a variable of type string using a raw string literal and then print the variable. ex06 Using iota , create 4 constant s for the last 4 years and print the constant s values.","title":"L020"},{"location":"level020/#level-2","text":"","title":"Level 2"},{"location":"level020/#exercises-in-this-level","text":"ex01 Write a program that prints a number in decimal , binary , and hex . ex02 Using the following operators, write expressions and assign their values to variables; == , <= , >= , != , < , > ex03 Create typed and untyped constant s. Print the values of the constant s. ex04 \"Exercise 4\") Write a program that; assigns an int to a variable, prints that int in decimal , binary , and hex , shifts the bits of that int over 1 position to the left and assigns that to a variable, prints that variable in decimal , binary , and hex . ex05 Create a variable of type string using a raw string literal and then print the variable. ex06 Using iota , create 4 constant s for the last 4 years and print the constant s values.","title":"Exercises in this level"},{"location":"level030/","text":"Level 3 Exercises in this level ex01 Print every number from 1 to 10,000 ex02 \"Exercise 2\") Print every rune code point of the uppercase ASCII alphabet 3x ex03 Create a for loop using syntax for condition {} , print the years you have been alive ex04 Create a for loop using syntax for {} , print the years you have been alive ex05 Print out the modulus for each number between 10 and 100 when divided by 4 ex06 Create a program that shows the if statement in action ex07 Building on the previous exercise, create a program that uses else if and else ex08 Create a program that uses a switch statement with no switch expression specified ex09 Create a program that uses a switch statement with the switch expression specified as a variable of type string with the identifier fav[Something]","title":"L030"},{"location":"level030/#level-3","text":"","title":"Level 3"},{"location":"level030/#exercises-in-this-level","text":"ex01 Print every number from 1 to 10,000 ex02 \"Exercise 2\") Print every rune code point of the uppercase ASCII alphabet 3x ex03 Create a for loop using syntax for condition {} , print the years you have been alive ex04 Create a for loop using syntax for {} , print the years you have been alive ex05 Print out the modulus for each number between 10 and 100 when divided by 4 ex06 Create a program that shows the if statement in action ex07 Building on the previous exercise, create a program that uses else if and else ex08 Create a program that uses a switch statement with no switch expression specified ex09 Create a program that uses a switch statement with the switch expression specified as a variable of type string with the identifier fav[Something]","title":"Exercises in this level"},{"location":"level040/","text":"Level 4 Exercises in this level ex01 Using a composite literal ; create an array which holds 5 values of type int , assign values to each index position . Range over the array and print the values out. Using format printing , print out the type of the array . ex02 Using a composite literal ; create a slice of type int , assign 10 values. Range over the slice and print the values out. Using format printing , print out the type of the slice. ex03 Using the code from the previous exercise, use slicing to create and print the following new slices; [42 43 44 45 46] , [47 48 49 50 51] , [45 46 47 48] , [43 44 45 46 47] . ex04 Write a program following these steps; start with the slice x :=[]int{28, 29, 30, 31, 32, 33, 34, 35, 36, 37} , append 38 to the slice and print, in one statement append 39, 40, 41 and print, append y := []int{42, 43, 44, 45, 46} and print. ex05 To delete from a slice, use append along with slicing. Write a program following these steps; start with slice x := []int{28, 29, 30, 31, 32, 33, 34, 35, 36, 37} , use append and slicing to derive values [28, 29, 30, 34, 35, 36, 37] and print. ex06 Create a slice to store the names of all 25 finalists of Eurovision 2022. Use make and append to do this. Goal: Do not have the array that underlies the slice created more than once. Print all values including index position without using the range clause. ex07 Create a slice of a slice of string [][]string . Store data in the multi-dimensional slice. Range over the records and then range of the data in each record. ex08 Create a map with a key of type string which is the full name of a Bletchley Park researcher and a value of type []string which stores some of their accomplishments. Store 5x records in the map , printing out all values with index position in the slice. ex09 Using the code from the previous exercise, add a new record to the map and print the map using range loop. ex10 Using the code from the previous exercise, delete a record from the map . Print the map using range loop.","title":"L040"},{"location":"level040/#level-4","text":"","title":"Level 4"},{"location":"level040/#exercises-in-this-level","text":"ex01 Using a composite literal ; create an array which holds 5 values of type int , assign values to each index position . Range over the array and print the values out. Using format printing , print out the type of the array . ex02 Using a composite literal ; create a slice of type int , assign 10 values. Range over the slice and print the values out. Using format printing , print out the type of the slice. ex03 Using the code from the previous exercise, use slicing to create and print the following new slices; [42 43 44 45 46] , [47 48 49 50 51] , [45 46 47 48] , [43 44 45 46 47] . ex04 Write a program following these steps; start with the slice x :=[]int{28, 29, 30, 31, 32, 33, 34, 35, 36, 37} , append 38 to the slice and print, in one statement append 39, 40, 41 and print, append y := []int{42, 43, 44, 45, 46} and print. ex05 To delete from a slice, use append along with slicing. Write a program following these steps; start with slice x := []int{28, 29, 30, 31, 32, 33, 34, 35, 36, 37} , use append and slicing to derive values [28, 29, 30, 34, 35, 36, 37] and print. ex06 Create a slice to store the names of all 25 finalists of Eurovision 2022. Use make and append to do this. Goal: Do not have the array that underlies the slice created more than once. Print all values including index position without using the range clause. ex07 Create a slice of a slice of string [][]string . Store data in the multi-dimensional slice. Range over the records and then range of the data in each record. ex08 Create a map with a key of type string which is the full name of a Bletchley Park researcher and a value of type []string which stores some of their accomplishments. Store 5x records in the map , printing out all values with index position in the slice. ex09 Using the code from the previous exercise, add a new record to the map and print the map using range loop. ex10 Using the code from the previous exercise, delete a record from the map . Print the map using range loop.","title":"Exercises in this level"},{"location":"level050/","text":"Level 5 Exercises in this level ex01 Create your own type person with an underlying type of struct such that it can store the following data; first name , last name , favourite 80s cartoon character s. Create two values of type person and print out the values , ranging over the elements in the slice. ex02 Using the code from the previous exercise, store the values of type person in a map with key of surname . Access each value in the map printing the values. ex03 \"Exercise 3\") Create a new type vehicle with underlying type struct with fields for doors and colour . Next, create 2x new type s with underlying type struct ; evSaloon and SUV . Make the SUV a fourWD using bool , and make the evSaloon luxury using bool . Using vehicle , evSaloon , and SUV struct s, create a value of type SUV and type evSaloon and assign values to the fields using a composite literal . Print each of these values and a single field from each value. ex04 Create and use an anonymous struct .","title":"L050"},{"location":"level050/#level-5","text":"","title":"Level 5"},{"location":"level050/#exercises-in-this-level","text":"ex01 Create your own type person with an underlying type of struct such that it can store the following data; first name , last name , favourite 80s cartoon character s. Create two values of type person and print out the values , ranging over the elements in the slice. ex02 Using the code from the previous exercise, store the values of type person in a map with key of surname . Access each value in the map printing the values. ex03 \"Exercise 3\") Create a new type vehicle with underlying type struct with fields for doors and colour . Next, create 2x new type s with underlying type struct ; evSaloon and SUV . Make the SUV a fourWD using bool , and make the evSaloon luxury using bool . Using vehicle , evSaloon , and SUV struct s, create a value of type SUV and type evSaloon and assign values to the fields using a composite literal . Print each of these values and a single field from each value. ex04 Create and use an anonymous struct .","title":"Exercises in this level"},{"location":"level060/","text":"Level 6 Exercises in this level ex01 Create a function with the identifier foo that returns an int . Create a function with the identifier bar that returns an int and a string . Call both function s and print out their results. ex02 Create a function with the identifier foo that; takes in a variadic parameter of type int , pass in a value of type []int to the function , returns the sum of all values of type int passed in. Create a function with the identifier bar that; takes in a parameter of type []int , returns the sum of all values of type int passed in. ex03 Use the defer keyword to show that a deferred function runs after the function containing it exits. ex04 Create a user defined struct with identifer person and fields forname , surname , age . Attach a method to type person with identifier speak , and the method should take the form of person stating their name , age . Create a value of type person , and call the method from value of type person . ex05 Create a type square and type circle . Attach a method to each which calculates and returns area . Create a type shape with defines an interface as anything which has the area method. Create a function info which takes type shape and then prints the area . Create a value of type square and a value of type circle . Use func info to print the area s of the square and circle . ex06 Build and use an anonymous function . ex07 Assign a function to a variable and call that function . ex08 Create a function which returns a function . Assign the returned function to a variable and call the returned function . ex09 > Demonstrate a callback by passing a function into a function as an argument. ex10 > Closure is defined as enclosing the scope of a variable in a code block . Create a function and enclose the scope of a variable . [1] https://github.com/mpyeager/GolangTraining/tree/main/Hands%20On%20Exercises/06.00","title":"L060"},{"location":"level060/#level-6","text":"","title":"Level 6"},{"location":"level060/#exercises-in-this-level","text":"ex01 Create a function with the identifier foo that returns an int . Create a function with the identifier bar that returns an int and a string . Call both function s and print out their results. ex02 Create a function with the identifier foo that; takes in a variadic parameter of type int , pass in a value of type []int to the function , returns the sum of all values of type int passed in. Create a function with the identifier bar that; takes in a parameter of type []int , returns the sum of all values of type int passed in. ex03 Use the defer keyword to show that a deferred function runs after the function containing it exits. ex04 Create a user defined struct with identifer person and fields forname , surname , age . Attach a method to type person with identifier speak , and the method should take the form of person stating their name , age . Create a value of type person , and call the method from value of type person . ex05 Create a type square and type circle . Attach a method to each which calculates and returns area . Create a type shape with defines an interface as anything which has the area method. Create a function info which takes type shape and then prints the area . Create a value of type square and a value of type circle . Use func info to print the area s of the square and circle . ex06 Build and use an anonymous function . ex07 Assign a function to a variable and call that function . ex08 Create a function which returns a function . Assign the returned function to a variable and call the returned function . ex09 > Demonstrate a callback by passing a function into a function as an argument. ex10 > Closure is defined as enclosing the scope of a variable in a code block . Create a function and enclose the scope of a variable . [1] https://github.com/mpyeager/GolangTraining/tree/main/Hands%20On%20Exercises/06.00","title":"Exercises in this level"},{"location":"level070/","text":"Level 7 Exercises in this folder ex01 Create a value and assign it to a variable . Print the address of the value. ex02 Create a person struct . Create a func changeMe with a *person as a parameter. Change the value stored at *person address. Create a value of type person and print out the value. In func main , call changeMe and print out the value.","title":"L070"},{"location":"level070/#level-7","text":"","title":"Level 7"},{"location":"level070/#exercises-in-this-folder","text":"ex01 Create a value and assign it to a variable . Print the address of the value. ex02 Create a person struct . Create a func changeMe with a *person as a parameter. Change the value stored at *person address. Create a value of type person and print out the value. In func main , call changeMe and print out the value.","title":"Exercises in this folder"},{"location":"level080/","text":"Coming soon Level 8 Content coming soon!","title":"L080"},{"location":"level080/#coming-soon","text":"","title":"Coming soon"},{"location":"level080/#level-8","text":"Content coming soon!","title":"Level 8"},{"location":"level090/","text":"Coming soon Level 9 Content coming soon!","title":"L090"},{"location":"level090/#coming-soon","text":"","title":"Coming soon"},{"location":"level090/#level-9","text":"Content coming soon!","title":"Level 9"},{"location":"level100/","text":"Coming soon Level 10 Content coming soon!","title":"L100"},{"location":"level100/#coming-soon","text":"","title":"Coming soon"},{"location":"level100/#level-10","text":"Content coming soon!","title":"Level 10"},{"location":"level110/","text":"Coming soon Level 11 Content coming soon!","title":"L110"},{"location":"level110/#coming-soon","text":"","title":"Coming soon"},{"location":"level110/#level-11","text":"Content coming soon!","title":"Level 11"},{"location":"level120/","text":"Coming soon Level 12 Content coming soon!","title":"L120"},{"location":"level120/#coming-soon","text":"","title":"Coming soon"},{"location":"level120/#level-12","text":"Content coming soon!","title":"Level 12"},{"location":"level130/","text":"Coming soon Level 13 Content coming soon!","title":"L130"},{"location":"level130/#coming-soon","text":"","title":"Coming soon"},{"location":"level130/#level-13","text":"Content coming soon!","title":"Level 13"}]}